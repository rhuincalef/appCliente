

1. La calle y altura en la subida se debe mostrar al lado de la lat.long -->OK
2. Dialogo para "¿Desea descartar capturas subidas?" -->OK
3. Screen con data obtenida del servidor sobre tipoMaterial,criticidad y tipoReparacion. Obtener los parametros del server al inicio de la aplicacion. -->OK (En prosCaptura.py)

3.5. Hacer que se muestre solamente el dialogo de "Estimando direccion fallas confirmadas" si existe al menos una falla nueva capturada(En view subircapturasservidor.py) --> OK. Movido el codigo de obtencion de propiedades de fallas confirmadas a applicacion_start().

4. Agregar spinnners para los mostrarDialogo() que se instancian
cuando se espera conversion de valores o lectura de archivos.(cuando se captura una falla, cuando se leen los tipos de falla del servidor,
cuando se estiman las direcciones de las fallas nuevas capturadas). Hacer con garden.iconfonts. -->OK

6. Hacer un archivo de texto con la instalacion de composer para PHP(usado para el geocoding de direcciones). --> OK

7. Ver como implementar el "Cancelar" de las subidas. -->OK

8. Agregar iconos para las opciones de los menus, junto con las letras. -->OK

9. Revisar la secuencia de dialogos cuando el servidor no esta online
 y se tiene que leer de la BDConfirmadas.json. El dialgo de "obteniendo fallas del servidor" se muestra aun cuando se cierra el dialog de "Resultados del servidor".  -->ok

10. Agregar en estrategia.filtrar() que los itemfalla que se agreguen a la coleccion de confirmados, se eliminen de la colCapturasTotales.(opcional) 

11. Agregar en kinectviewer.py el on_enter() y ahi bindear la captura con la SPACEBAR. -->OK

12. Hacer que kinectviewer se actualice cada vez que el screen sea cargado por el screenmanager.(opcional) 

13. Ver la excepcion que se define en error-Kinect.txt. Probablemente solucionado, se verifica siempre la obtencion de datos tanto de la camara IR del sensor como de video. -->OK

14. Resolver el problema de nombres de archivo que tienen blankspaces en el nombre, dentro del modulo dialogopropscaptura.py (en el textinput). -->OK

15. Hacer que kinectviewer detecte la conexion al sensor y no haya que reiniciar la app.(opcional)

16. Hacer en main.cargarRecorrido() que luego de cargar el recorrido, se verifique la existencia de los archivos .pcd y sus .csv asociados. Si al menos el .csv no existe, que se descarten aquellas fallas y no se agreguen a la colCapturas de los capturadores.
-->OK




*EL tipoReparacion obligatorio lo va revisar Guille. -->OK



17-CORREGIR CONSTRUCTOR GEOFENCING PARA ACCEDER A SELF.SESSION PARA ACCEDERLO SOLO CUANDO NO SEA 'real-gps' -->OK 

18-CORREGIR EN apiclient.py "getPropsConfirmados" para obtener tipos de fallas y reparaciones con acentos. -->OK

19-SEPARAR EN constantes.py CONSTANTES DE URLs PARA AGREGAR UN SERVERNAME CONFIGURABLE. -->OK

20-HACER QUE CUANDO SE GUARDE UN ARCHIVO DE "RECORRIDO" DE CAPTURAS SE GUARDE COMO .rec. -->OK




21. CORREGIR EN utils.py escaparCaracteresEspeciales() problema con la "u" sin acento.

22. Remover marco de ventana del mismo color (como nod32).

23. Autocomplete para obtener fallas informadas (obtieniendo solo calles del servidor). -->OK

24. CAMBIAR LA TESINA DE REPO DESPUES DE ARREGLAR LA INTERACCION APPCLIENTE-WEBAPP. -->OK

25. Incluir la criticidad en la appCliente dentro de las propiedades de la falla que se traen desde el servidor.

CONSULTA CON GABRIEL JULIO 2017-->

26. Cambiar el menu principal para que el cambio se aprecie por el usuario. -->OK

27. Cambiar el drop-down para indicar cambio (con colores sobre el elemento seleccionado y/o tamaño de los elementos) en "Capturar falla nueva" propiedades de la falla. -->OK

29. Ver posibilidad de elegir BD_LOCAL_xxxx.json de dias anteriores. -->OK PARCIAL.(Falta implementar en appCliente).

30. Hacer el select all para subir todas las fallas capturadas. -->OK

31. Cambiar el icono del tipo de falla y material. -->OK. Iconos agregados.

32. Reemplazar el tipo de reparación por las criticidades. Incluir las criticidades en las propiedades de la falla. -->OK

33. Agregar los campos de las fallas confirmadas que se envian desde appCliente hacia webapp. -->OK

 
34. Ver almacenar recorrido, porque solmanete almacena las fallas confirmadas. Tiene que almacenar confirmadas e informadas capturadas no subidas al servidor. --> OK. ALMACENA LAS INFORMADAS Y CONFIRMADAS EN ARCHIVO DE RECORRIDO SIEMPRE Y CUANDO NO SE HAYAN SUBIDO AL SERVIDOR.

35. Ver validacion de archivo json BD Local confirmadas (si se incluye esto en la version final).

36. Crear iconos de peligro para criticidad y obtener fallas informadas... -->OK

37. Crear un objeto FakeGPS que tire las latitudes y longitudes en una lista ciclica y almacene en un archivo la ultima falla. -->OK     

38. CORREGIR -->AL CAPTURAR UNA FALLA INFORMADA, SUBIR UNA FALLA Y CAPTURAR DE VUELTA OTRA CAPTURA PARA LA MISMA FALLA INFORMADA, SE SUBE DE NUEVO LA PRIMERA CAPTURA QUE YA ESTA SUBIDA. SE DEBE VERIFICAR QUE NO ESTE SUBIDA O MARCARLA COMO SUBIDA. 



NOTAS IMPORTANTE PARA INTEGRACION:

-Agregar asociacion entre tipoFalla-tipoMaterial, tipoFalla-Criticidad
-El tipo reparacion tiene que ser opcional para fallas con estado Confirmado
-Copiar los archivos que se encuentran en carpeta "archServerModificadosParaRedisenio"
-Modificar el path en constantes de customTheme.py


--COSAS PARA CORREGIR DE GABRIEL-->

En appCliente: 
*FONDO TABBED PANEL, MAPA MAS ALEJADO Y MENOS DIFUMINADO.  -->OK
*DROPDOWN MAS BRILLANTE CUANDO SE SELECCIONA ELEMENTO. --> OK
*CHECKBOX SUBIR FALLA BLANCO O NEGRO. -->  OK
*LISTVIEW COLOR MAS BRILLANTE PARA SELECCION Y COLOR MAS OSCURO PARA NO SELECCION.CRIT. SELECCION UNIFORME. --> OK


En documento formal tesina:
*Quitar los numeros al costado del indice 1,2,3,4,5,etc.
*Marco teórico como breve introduccion del cap. de antecedentes historicos.
*Cap. "organización de contenidos" debe estar fuera del índice.
*Diagrama de Gantt en sección de "Anexos". Ver como incorporar anexo en sphinx.









